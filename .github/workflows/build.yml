name: spt-development-audit-spring-boot

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 19
        uses: oracle-actions/setup-java@v1
        with:
          website: jdk.java.net
          release: 19

      - name: Build with Maven
        run: mvn clean install -B

      - name: Mutation testing
        run: mvn org.pitest:pitest-maven:mutationCoverage -B

  release:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 19
        uses: oracle-actions/setup-java@v1
        with:
          website: jdk.java.net
          release: 19
          
      - name: Determine version
        run: echo "POM_VERSION=$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec | sed -e 's/-SNAPSHOT//')" >> $GITHUB_ENV

      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v5.2.0
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}

      - name: Configure Git User for updating version
        run: |
          git config user.email "actions@github.com"
          git config user.name "GitHub Actions"

      - name: Create release
        run: mvn --settings .github/maven-settings.xml release:prepare release:perform -DskipTests -Prelease -B
        env:
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
          GIT_HUB_USERNAME: ${{ secrets.GIT_HUB_USERNAME }}
          GIT_HUB_TOKEN: ${{ secrets.GIT_HUB_TOKEN }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

      - name: Create GitHub release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.POM_VERSION }}
          release_name: ${{ env.POM_VERSION }}
          draft: false
          prerelease: false

      - name: Upload GitHub release asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: spt-development-audit-spring-boot-autoconfigure/target/spt-development-audit-spring-boot-autoconfigure-${{ env.POM_VERSION }}.jar
          asset_name: spt-development-audit-spring-boot-autoconfigure-${{ env.POM_VERSION }}.jar
          asset_content_type: application/java-archive

      - name: Upload GitHub release asset
        id: upload-release-asset-2
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: spt-development-audit-spring-boot-starter/target/spt-development-audit-spring-boot-starter-${{ env.POM_VERSION }}.jar
          asset_name: spt-development-audit-spring-boot-starter-${{ env.POM_VERSION }}.jar
          asset_content_type: application/java-archive